import { Component } from "@angular/core";
import { DatePipe } from "@angular/common";
@Component({
  selector: "app-dateconveter",
  templateUrl: "./dateconveter.page.html",
  styleUrls: ["./dateconveter.page.scss"]
})
export class DateconveterPage {
  todo = { year: null, month: null, day: null };
  todonp = { year: null, month: null, day: null };
  adbs: any;
  enter: boolean = false;
  DateNp: any;
  Dateeng: any;
  engYear = [];
  nepYear = [];
  nmonths = [
    "बैशाख",
    "जेष्ठ",
    "आषाढ",
    "श्रावण",
    "भाद्र",
    "आश्विन",
    "कार्तिक",
    "मंसिर",
    "पौष",
    "माघ",
    "फाल्गुन",
    "चैत्र"
  ];
  nday = [];
  months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  day = [];
  c: boolean;
  cn: boolean;
  constructor(private datePipe: DatePipe) {}

  ionViewDidEnter() {
    this.enter = true;
    this.adbs = require("ad-bs-converter");
    let utc = new Date();
    let utc1 = this.datePipe.transform(utc, "yyyy/MM/dd");
    this.todo.year = Number(utc1.slice(0, 4));
    this.todo.month = Number(utc1.slice(5, 7));
    this.todo.day = Number(utc1.slice(8, 10));
    this.DateNp = this.adbs.ad2bs(utc1);
    this.todonp.year = this.DateNp.en.year;
    this.todonp.month = this.DateNp.en.month;
    this.todonp.day = this.DateNp.en.day;
    this.EngDate();
    this.NepDate();
    this.BstoAd();
  }

  AdtoBS() {
    let y = this.todo.year;
    let m = this.todo.month;
    let d = this.todo.day;
    let c = String(y) + "/" + String(m) + "/" + String(d);
    this.DateNp = this.adbs.ad2bs(c);
  }
  BstoAd() {
    let y = this.todonp.year;
    let m = this.todonp.month;
    let d = this.todonp.day;
    let c = String(y) + "/" + String(m) + "/" + String(d);
    this.Dateeng = this.adbs.bs2ad(c);
  }
  EngDate() {
    for (let i = 2023; i >= 1950; i--) {
      this.engYear.push(i);
    }
    this.daysInMonth(this.todo.month, this.todo.year);
  }
  listen(m: number, y: number) {
    if (this.c) {
      this.c = false;
    } else {
      this.c = true;
    }
    this.daysInMonth(m, y);
  }
  listennp(m: number, y: number) {
    if (this.cn) {
      this.cn = false;
    } else {
      this.cn = true;
    }
    this.dinInMoths(m, y);
  }
  daysInMonth(month: number, year: number) {
    this.day = [];
    let tm = new Date(year, month, 0).getDate();
    for (let i = 1; i <= tm; i++) {
      this.day.push(i);
    }
  }
  dinInMoths(month: number, year: number) {
    this.nday = [];
    let calendar_data = {
      "1978": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "1979": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "1980": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "1981": [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
      "1982": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "1983": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "1984": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "1985": [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
      "1986": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "1987": [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "1988": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "1989": [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "1990": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "1991": [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "1992": [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
      "1993": [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "1994": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "1995": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
      "1996": [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
      "1997": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "1998": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "1999": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2000": [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],
      "2001": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2002": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2003": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2004": [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],
      "2005": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2006": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2007": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2008": [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],
      "2009": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2010": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2011": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2012": [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
      "2013": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2014": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2015": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2016": [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
      "2017": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2018": [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2019": [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
      "2020": [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2021": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2022": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
      "2023": [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
      "2024": [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2025": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2026": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2027": [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],
      "2028": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2029": [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365],
      "2030": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2031": [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],
      "2032": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2033": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2034": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2035": [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],
      "2036": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2037": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2038": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2039": [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
      "2040": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2041": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2042": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2043": [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
      "2044": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2045": [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2046": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2047": [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2048": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2049": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
      "2050": [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
      "2051": [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2052": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2053": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
      "2054": [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
      "2055": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2056": [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365],
      "2057": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2058": [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],
      "2059": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2060": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2061": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2062": [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31, 365],
      "2063": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2064": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2065": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2066": [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],
      "2067": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2068": [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2069": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2070": [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],
      "2071": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2072": [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],
      "2073": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],
      "2074": [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2075": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2076": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
      "2077": [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],
      "2078": [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2079": [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],
      "2080": [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],
      "2081": [31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366],
      "2082": [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],
      "2083": [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365],
      "2084": [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365],
      "2085": [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30, 366],
      "2086": [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],
      "2087": [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366],
      "2088": [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30, 365],
      "2089": [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],
      "2090": [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],
      "2091": [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366],
      "2092": [31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366]
    };
    let y1 = calendar_data[year][month - 1];
    for (let i = 1; i <= y1; i++) {
      this.nday.push({
        e: i,
        n: this.convertNum(i)
      });
    }
  }
  convertNum(num: any) {
    let result = "";
    let nums = {
      "0": "०",
      "1": "१",
      "2": "२",
      "3": "३",
      "4": "४",
      "5": "५",
      "6": "६",
      "7": "७",
      "8": "८",
      "9": "९"
    };
    let temp = num.toString().split("");
    for (let n of temp) {
      result += nums[n];
    }
    return result;
  }
  NepDate() {
    for (let i = 2080; i >= 2000; i--) {
      this.nepYear.push({
        e: i,
        n: this.convertNum(i)
      });
    }
    this.dinInMoths(this.todonp.month, this.todonp.year);
  }
}
